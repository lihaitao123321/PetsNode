var Tools = {  ioLogin: function (phone, socketId) {    let p = new Promise((resolve, reject) => {      //如果未登录，登录      DB.sqlDB(`insert into socketer(phone,socketId) values('${phone}','${socketId}')`).then((data) => {        if (data.warningCount == 0) {          resolve(true);        } else {          resolve(false);        }      });    });    return p;  },  ioSignOut: function (socketId) {    //如果未登录，登录    DB.sqlDB(`delete from user where socketId=${socketId}`).then(function (data) {    });  },  ioUpdateLogin: function (chatId, socketId) {    var p = new Promise(function (resolve, reject) {      DB.sqlDB(`update socketer set socketId='${socketId}' where chatId='${chatId}'`).then(function (data) {        if (data.warningCount == 0) {          resolve(true);        } else {          resolve(false);        }      });    });    return p;  },  ioHasLogin: function (socketId) {    var p = new Promise(function (resolve, reject) {      DB.sqlDB(`select * from socketer where socketId=${socketId}`).then(function (userList) {        if (userList.length == 1) {          resolve(true);        } else {          resolve(false);        }      });    });    return p;  },  getSocketId: function (chatId) {    var p = new Promise(function (resolve, reject) {      DB.sqlDB('select * from socketer where chatId=\'' + chatId + '\'').then(function (userList) {        if (userList.length == 1) {          resolve(userList[0].socketId);        } else {          resolve(false);        }      });    });    return p;  },  //清除未读消息数量  ioResetUnreadMsgCount(phone, chatter, cb) {    var p = new Promise(function (resolve, reject) {      DB.sqlDB(`update chatList set unreadMsgCount = 0 where phone='${phone}' and chatter='${chatter}'`).then(function (status) {        if (status) {          resolve(true)        } else {          resolve(false)        }      });    });    return p;  },  //获取近期聊天对象  ioGetRecentChatters(phone) {    var p = new Promise(function (resolve, reject) {      let sql = `select c.* ,u.headImg,u.nickName,m.*  from  chatList c left join  user u on c.chatter=u.phone left join  msgHistory m on c.lastMsgId=m.messageId where c.phone='${phone}'`;      DB.sqlDB(sql).then(function (chatList) {        if (chatList && chatList.length > 0) {          resolve(chatList)        } else {          resolve(false)        }      });    });    return p;  },  //获取历史记录  ioGetMsgHistory(data) {    var p = new Promise(function (resolve, reject) {      let sql = `SELECT * FROM msgHistory WHERE (\`from\`='${data.phone}' AND \`to\`='${data.chatter}') or (\`from\`='${data.chatter}' AND \`to\`=${data.phone})`;      DB.sqlDB(sql).then(function (dataList) {        if (dataList && dataList.length > 0) {          resolve(dataList)        } else {          resolve(false)        }      });    });    return p;  },  //保存历史记录  ioSaveHistory(phone, chatter, chatType, messageId, content) {    var p = new Promise(function (resolve, reject) {      let sql = `insert into msgHistory(\`from\`,\`to\`,chatType,messageId,messageBody) values('${phone}','${chatter}',${chatType},'${messageId}','${content}')`;      DB.sqlDB(sql).then((data) => {        if (data) {          resolve(true);        } else {          resolve(false);        }      });    });    return p;  },  //获取单条聊天信息  getMsg(messageId) {    var p = new Promise(function (resolve, reject) {      let sql = `select * from msghistory where messageId='${messageId}'`;      DB.sqlDB(sql).then((data) => {        if (data && data.length == 1) {          resolve(data[0]);        } else {          resolve(false);        }      });    });    return p;  },  //判断chatter在chatList表是否存在记录  diffHasChat(from, to) {    var p = new Promise(function (resolve, reject) {      let sql = `select * from chatList where phone=${from} and chatter=${to}`;      DB.sqlDB(sql).then((data) => {        if (data && data.length == 1) {          resolve(true);        } else {          resolve(false);        }      });    });    return p;  },  //创建聊天对象  creatChatter(phone, chatter, chatType, unreadMsgCount, lastMsgId) {    var p = new Promise(function (resolve, reject) {      let sql = `insert chatList(phone,chatter,chatType,unreadMsgCount,lastMsgId) into ('${phone}','${chatter}','${chatType}','${unreadMsgCount}','${lastMsgId}')`;      DB.sqlDB(sql).then((data) => {        if (data) {          resolve(true);        } else {          resolve(false);        }      });    });    return p;  },  //消息数量加1  msgNumAdd(from, to) {    var p = new Promise(function (resolve, reject) {      let sql = `update chatList c set unreadMsgCount=c.unreadMsgCount+1 where phone=${from} and chatter=${to}`;      DB.sqlDB(sql).then((data) => {        if (data) {          resolve(true);        } else {          resolve(false);        }      });    });    return p;  }}module.exports = Tools;
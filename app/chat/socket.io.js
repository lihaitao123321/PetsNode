var ioHandle = require("./ioHandle");module.exports = function (io) {  //监听消息  io.on("connection", function (socket) {    console.log()    //登陆聊天服务器    socket.on('login', (phone) => {    });    //向指定用户发送文本消息    socket.on('sendText', async (data) => {      //1.判断chatList表是否存在聊天天对象---2.创建聊天对象---3.未读消息数量+1---4.保存聊天历史---5.查询聊天记录---6.返回给前端      let state = 0;      let cbMsg;      let messageId = data.phone + new Date().getTime();      //事务开始      await DB.beginTransaction();      //1.判断chatList表是否存在聊天天对象      let boo1 = await ioHandle.diffHasChat(data.phone, data.chatter);      if (boo1) {        //  3.未读消息数量+1        let boo3 = await ioHandle.msgNumAdd(data.phone, data.chatter);        if (boo3) {          //4.保存聊天历史          let boo4 = await ioHandle.ioSaveHistory(data.phone, data.chatter, data.chatType, messageId, data.content);          if (boo4) {            //5.查询聊天记录            let msg = await ioHandle.getMsg(messageId);            if (msg) {              cbMsg = msg;              let status = await DB.commitTransaction();              if (status) {                state = 1;              }            }          }        }      } else {        //2.创建聊天对象,消息数量默认为1        let boo2 = await ioHandle.creatChatter(data.phone, data.chatter, data.chatType, 1, messageId);        if (boo2) {          //4.保存聊天历史          let boo4 = await ioHandle.ioSaveHistory(data.phone, data.chatter, data.chatType, data.messageId, data.content);          if (boo4) {            //5.查询聊天记录            let msg = await ioHandle.getMsg(messageId);            if (msg) {              cbMsg = msg;              let status = await DB.commitTransaction();              if (status) {                state = 1;              }            }          }        }      }      if (state == 1) {        io.to(socket.id).emit('cbSendText', {code: 0, msg: "发送文本消息成功", data: cbMsg});      } else {        //回滚        await DB.rollbackTransaction();        io.to(socket.id).emit('cbSendText', {code: -1, msg: "发送文本消息失败"});      }    });    //清空消息数量    socket.on('resetUnreadMsgCount', (data) => {      ioHandle.ioResetUnreadMsgCount(data.phone, data.chatter).then(status => {        if (status) {          io.to(socket.id).emit('cbResetUnreadMsgCount', {code: 0, msg: "清空成功",data:data.chatter});        } else {          io.to(socket.id).emit('cbResetUnreadMsgCount', {code: -1, msg: "清空失败"});        }      });    });    //获取近期聊天对象列表    socket.on('getRecentChatters', (data) => {      ioHandle.ioGetRecentChatters(data).then(msgList => {        if (msgList) {          io.to(socket.id).emit('cbGetRecentChatters', {code: 0, msg: "获取聊天记录成功", data: msgList});        } else {          io.to(socket.id).emit('cbGetRecentChatters', {code: -1, msg: "获取聊天记录失败"});        }      });    });    //获取聊天记录    socket.on('getMsgHistory', (data) => {      ioHandle.ioGetMsgHistory(data).then(msgList => {        if (msgList) {          io.to(socket.id).emit('cbGetMsgHistory', {code: 0, msg: "获取聊天记录成功", data: msgList});        } else {          io.to(socket.id).emit('cbGetMsgHistory', {code: -1, msg: "获取聊天记录失败"});        }      });    });    socket.on('disconnect', function () {      // console.log('？？？离开了聊天室');      //用户断开了连接,退出登录    })  });};